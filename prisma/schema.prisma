// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Sorteo {
  id           Int      @id @default(autoincrement())
  name         String
  lastName     String
  email        String   @unique
  weddingDate  DateTime
  weddingPlace String?
  createdAt    DateTime @default(now())
}

model User {
  id                    Int                     @id @default(autoincrement())
  name                  String?
  email                 String                  @unique
  password              String?
  image                 String?
  emailVerified         DateTime?               @map("email_verified")
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  weddingInvitationList WeddingInvitationList[]
  groups                Group[]
  provider              String?
  weddingId             Int?
  weddings              Wedding[]               @relation("UserToWedding")
  adminWeddings         Wedding[]               @relation("AdminToWedding")
  profilePicture        String?
  lastName              String?
  partnerName           String?
  partnerLastName       String?
  weddingDate           DateTime?
  role                  ROLE                    @default(ADMIN)
  partnerRole           ROLE                    @default(ADMIN)
  expenses              Expenses[]
  superAdmin  Boolean @default(false)  
}

model Wedding {
  id                    Int                     @id @default(autoincrement())
  weddingInvitationList WeddingInvitationList[]
  users                 User[]                  @relation("UserToWedding")
  groups                Group[]
  weddingDate           DateTime?
  weddingPlace          String?
  createdAt             DateTime                @default(now())
  weddingName           String?
  inviteTokens          InviteToken[]
  adminId               Int
  admin                 User                    @relation("AdminToWedding", fields: [adminId], references: [id])
  weddingExpenses Expenses[]
  tokenForInvitation  String?
  budget                Float?
  splitBetween          String[]
  picture               String?
}




enum ROLE {
  ADMIN
  BRIDE
  GROOM
  WEDDING_PLANNER
}

model Expenses {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  amount      Float
  wedding     Wedding   @relation(fields: [weddingId], references: [id])
  weddingId   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  alreadyPay  Boolean   @default(false)
  pagado      Float?  
  paymentDate DateTime?
  splitBetween String[]
  paidBy      User?     @relation(fields: [paidById], references: [id])
  paidById    Int?
  status     STATUS    @default(PENDING)
  installments Installment[]
  erase Boolean @default(false)  
  categories  String[]
}


model InviteToken {
  id        Int      @id @default(autoincrement())
  token     Int      @unique
  email     String
  wedding   Wedding  @relation(fields: [weddingId], references: [id])
  weddingId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
}

model Installment {
  id          Int      @id @default(autoincrement())
  amount      Float
  dueDate     DateTime?
  paid        Boolean  @default(false)
  expense     Expenses @relation(fields: [expenseId], references: [id])
  expenseId   Int
}

enum STATUS {
  PENDING
  PAID
  CANCELLED
}
model WeddingInvitationList {
  id               Int      @id @default(autoincrement())
  name             String[]
  lastName         String[]
  emailInvitation  String[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id])
  userId           Int
  plusOne Boolean @default(false)
  family           Boolean  @default(false)
  invitedBy        String[]
  specialRole      String[]
  isAttending      Boolean  @default(false)
  isConfirmed      Boolean  @default(false)
  plusOneConfirmed Boolean  @default(false)
  groups           Group[]
  groupId          Int?
  Table            Int?
  phoneNumber      String?
  wedding          Wedding  @relation(fields: [weddingId], references: [id])
  weddingId        Int
  avatar         String[]
  groupby         String[]
}



model Group {
  id                    Int                     @id @default(autoincrement())
  name                  String
  user                  User                    @relation(fields: [userId], references: [id])
  userId                Int
  weddingInvitationList WeddingInvitationList[]
  wedding               Wedding                 @relation(fields: [weddingId], references: [id])
  weddingId             Int
}


model weddingInvitationCard{
  id               Int      @id @default(autoincrement())
  model             String
  url               String
  likes             Int      @default(0)
}